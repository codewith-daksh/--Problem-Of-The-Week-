Problem Title:


Subarray Sum Equals K
You are working as a data analyst for a fitness app. Every day, users log the number of 
calories burned. Your task is to find how many continuous days (subarrays) exist where the 
total calories burned equals a certain target k. This helps the app identify specific goal-based 
streaks.


Problem Statement:
Given an integer array nums representing the calories burned each day, and an integer k
representing a target calorie goal, return the total number of continuous subarrays whose 
sum is exactly equal to k.


Input Format:
â€¢ An integer n â€” the number of days.
â€¢ An array nums of n integers â€” calories burned each day.
â€¢ An integer k â€” the target calorie burn.

Output Format:
â€¢ A single integer â€” the total number of continuous subarrays whose sum equals k.


Constraints:
â€¢ 1 <= nums.length <= 2 * 10^4
â€¢ -1000 <= nums[i] <= 1000
â€¢ -10^7 <= k <= 10^7

Example 1:
Input:
nums = [1, 2, 3]
k = 3
Output:
2
Explanation:
There are two subarrays that sum to 3:
â€¢ [1, 2]
â€¢ [3]


Example 2:
Input:
nums = [1, 1, 1]
k = 2
Output:
2
Explanation:
Subarrays [1,1] at indices (0,1) and (1,2) both sum to 2.


Approach:
âœ… Efficient Approach â€” Prefix Sum + HashMap (Time: O(n), Space: O(n))
1. Use a variable sum to track the running sum.
2. Use a HashMap to store how many times each prefix sum has occurred.
3. For each element:
o Add it to the running sum.
o Check if sum - k is already in the map â€” if yes, add the count to the result.
o Update the map with the new sum.
Key Insight:
If:
sum(i to j) = sum(j) - sum(i-1)
Then for subarrays ending at j, we check if (sum - k) was seen before.

ðŸ”— Practice Links:
â€¢ Leetcode 560 â€“ Subarray Sum Equals K
â€¢ GeeksforGeeks Variation (Count subarrays with given sum)
